@startuml ModeloInicial-V0.4

Class ALTEGO{

}

Class Tablero{
    + agregarPais(unPais: Pais)
    + agregarFichas(cantidadFichas: int, unJugador: Jugador, unNombrePais: String)
    + atacar(jugador: Jugador, nombrepaisMio: String, nombrePaisEnemigo: String, cantidadDeDadosAtacante: int): boolean
    +calcularDichasDe(unJugador: Jugador)

    + getContinentes(): Map<String, Continente>
    + getPaises(): Map<String, Pais>
    + buscarPais(unNombrePais: String): Pais
    
}

Class Continente{
    - nombreContinente
    - fichas

    + getPaises(): List<Pais>
    + getFichas(): int
    + getNombre(): String
    + esDeJugador(jugador: Jugador): boolean
    + cantidadDePaisesDe(jugador: Jugador): int
}

Class Jugador{
    - color
    - fichasIniciales

    +actualizarFichasActuales(cantidadFichas: int)
    +jugadorPuedeColocarFichas(cantidadFichas: int)
    +agregarFichas(cantidadFichas: int)
    +esElMismoJugador(jugador: Jugador)
    +tieneFichas(): boolean
}

Interface ColeccionDeCartasPaisJugador <<Interface>> {
}

Interface ColeccionDeCartasPaisTeg <<Interface>>{
}

Class Turnos {
    - jugadores: List<String>
    - jugadorActual: String
    - iteradorJugadores: ListIterator<String>

    + agregarJugador(color: String)
    + comenzarJuego()
    + atacar(paisAtacante: String, paisDefensor: String, cant: Integer): boolean
    + reagrupar(paisUno: String, paisDos: String, cant: Integer)
    + colocarEjercito
}

Interface TipoDeRonda <<Interface>> {

}

Class Pais{
    - jugador: Jugador
    - nombrePais
    - paisesLimitrofes: List<String>

    + getNombre(): String
    + getJugador(): Jugador
    + esAdyacente(unPais: Pais): boolean
    + asignarJugador(unJugador: Jugador)
    + agregarFichas(cantidadFichas: Integer, unJugador: Jugador)
    + perderFichas(cantidadFichas: Integer)
    + actualizarDuenio(unPais: Pais)
    + perderFichas(cantidadFichas: Integer, paisAtacante: Pais): boolean
    + pasarFichasA(unPais: Pais, cantidadFichas: Integer)
    + esDeJugador(unJugador: Jugador): boolean
}

Class Ejercito{
    - cantidadFichas: Integer

    + agregarFichas(cantidadFichas: Int)
    + getCantFichas(): Integer
    + perderFichas(cantidadFichas: Integer): Integer
    + pasarFichasADe(unPais: Pais, unJugador: Jugador, cantidadFichas: Integer)
    + tirardados(): Dados
    + tirarDados(cantidadDados: Integer): Dados
}


Class Batalla{
    - paisAtacante
    - paisDefensor

    + batallar(cantidadDadosAtacante: Integer): boolean
    + validarAtaque(): boolean
}

Class TarjetaPais{
    - nombrePais
    - simbolo
}

/'Class TarjetaObjetivo{}'/

Turnos -right-> ALTEGO
ALTEGO --> "1" Tablero
ALTEGO --> "2..6"Jugador
ALTEGO --right--> ColeccionDeCartasPaisTeg


/'Jugador <-- Pais'/
Jugador --> ColeccionDeCartasPaisJugador

Tablero "1"-->"50" Pais
Tablero "1"-->"6" Continente
Tablero ..> Batalla

Turnos --> TipoDeRonda

Batalla ..> Pais
Continente --right-->"n..m" Pais
Pais "1"-->"1" Ejercito

/'Jugador --> TarjetaObjetivo'/
/'TarjetaObjetivo ..> Tablero'/

Pais <--right-- TarjetaPais

@enduml