@startuml DiagramaDeSecuenciaUnPaisAtacaAOtro-V0.2

Participant Jugador
Participant Tablero
Participant Batalla
Participant Pais as "paisMio: Pais"
Participant Ejercito as "ejercito: Ejercito"
Participant PaisEnemigo as "paisEnemigo: Pais"
Participant EjercitoEnemigo as "ejercitoEnemigo: Ejercito"

activate Tablero
Jugador->Tablero: atacarConA(jugador, paisMio, paisEnemigo)
Tablero -> Tablero: buscarPais(PaisMio)
activate Tablero
Tablero --> Tablero: paisMio
deactivate Tablero
Tablero -> Tablero: buscarPais(paisEnemigo)
activate Tablero
Tablero --> Tablero: paisEnemigo
deactivate Tablero
Tablero -> Batalla: atacarConA(jugador, paisMio, paisEnemigo)
activate Batalla
Batalla -> Batalla: esAtaqueValido(jugador, paisMio, paisEnemigo)
activate Batalla
Batalla -> Pais: esDeJugador(jugador)
activate Pais
Pais --> Batalla: true: Boolean
deactivate Pais
Batalla -> Pais: esAdyacente(paisEnemigo)
activate Pais
Pais --> Batalla: true: Boolean
deactivate Pais
Batalla -> PaisEnemigo: esDeJugador(jugador)
activate PaisEnemigo
PaisEnemigo --> Batalla: false: Boolean
deactivate PaisEnemigo
Batalla --> Batalla: true:Boolean
deactivate Batalla
Batalla -> Pais: dadosAtacar()
activate Pais
Pais -> Ejercito: dadosAtacar()
activate Ejercito
Ejercito --> Pais: dadosAtacante:OrderedArray
deactivate Ejercito
Pais --> Batalla: dadosAtacante:OrderedArray
deactivate Pais
Batalla -> PaisEnemigo: dadosDefender()
activate PaisEnemigo
PaisEnemigo -> EjercitoEnemigo: dadosDefender()
activate EjercitoEnemigo
EjercitoEnemigo --> PaisEnemigo: dadosDefensor:OrderedArray
deactivate EjercitoEnemigo
PaisEnemigo --> Batalla: dadosDefensor:OrderedArray
deactivate PaisEnemigo
Batalla -> Pais: pederFichas(num)
activate Pais
Pais -> Ejercito: perderFichas(num)
Ejercito --> Pais: Integer
deactivate Pais
Batalla -> PaisEnemigo: perderFichas(num, paisAtacante)
PaisEnemigo -> EjercitoEnemigo: perderFichas(num)

alt defensor queda con 0 fichas
    EjercitoEnemigo --> PaisEnemigo: 0: Integer
    PaisEnemigo -> PaisEnemigo: actualizar()
    PaisEnemigo -> Pais: getJugador()
    activate Pais
    Pais --> PaisEnemigo:  jugador
    deactivate Pais
    PaisEnemigo -> Pais: pasarFichasA(paisEnemigo)
    activate Pais
    Pais -> Pais: esAdyacente(paisEnemigo)
    activate Pais
    Pais --> Pais: Boolean
    deactivate Pais
    Pais -> Ejercito: pasarFichasADe(paisEnemigo,Jugador)
    deactivate Pais
    activate Ejercito
    note right Ejercito
        Aca se le puede preguntar a jugador cuantas
        fichas pasar. Duda de como limitarlo
    end note
    Ejercito -> PaisEnemigo: ponerFichasDe(num,jugador)
    deactivate Ejercito
    activate PaisEnemigo
    PaisEnemigo -> PaisEnemigo: esDeJugador(jugador)
    activate PaisEnemigo
    PaisEnemigo --> PaisEnemigo: true: Boolean
    deactivate PaisEnemigo
    PaisEnemigo -> EjercitoEnemigo: sumarFichas(num)
    PaisEnemigo --> Batalla: Gano
else  defensor sigue con fichas
    activate EjercitoEnemigo
    EjercitoEnemigo --> PaisEnemigo: Integer
    deactivate EjercitoEnemigo
    PaisEnemigo --> Batalla: noGano
    deactivate PaisEnemigo
end
Batalla --> Tablero: resultadoBatalla
Tablero --> Jugador: resultadoBatalla

@enduml