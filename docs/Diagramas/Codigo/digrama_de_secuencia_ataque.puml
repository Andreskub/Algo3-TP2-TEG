@startuml DiagramaDeSecuenciaUnPaisAtacaAOtro-V0.5

Participant Jugador
Participant Tablero
Participant Batalla
Participant Pais as "paisMio: Pais"
Participant Ejercito as "ejercito: Ejercito"
Participant PaisEnemigo as "paisEnemigo: Pais"
Participant EjercitoEnemigo as "ejercitoEnemigo: Ejercito"
Participant DadosAtacante as "dadosAtacante: Dados"

activate Tablero
Jugador->Tablero: atacarConA(jugador, paisMio, paisEnemigo)
Tablero -> Tablero: buscarPais(PaisMio)
activate Tablero
Tablero --> Tablero: paisMio
deactivate Tablero
Tablero -> Pais: esDeJugador(jugador)
activate Pais
Pais --> Tablero: true: Boolean
deactivate Pais
Tablero -> Tablero: buscarPais(paisEnemigo)
activate Tablero
Tablero --> Tablero: paisEnemigo
deactivate Tablero
create Batalla
Tablero -> Batalla: Batalla(paisMio: Pais, paisEnemigo: Pais)
Tablero -> Batalla: batallar(cantidadDeDados: Integer)
note left: Aca le podemos pasar jugador y hacer la comprobacion
Batalla -> Batalla: esAtaqueValido(paisMio, paisEnemigo)
activate Batalla
Batalla -> Pais: esAdyacente(paisEnemigo)
activate Pais
Pais --> Batalla: true: Boolean
deactivate Pais
Batalla -> PaisEnemigo: esDeJugador(jugador)
activate PaisEnemigo
PaisEnemigo --> Batalla: false: Boolean
deactivate PaisEnemigo
Batalla --> Batalla: true:Boolean
deactivate Batalla
Batalla -> Pais: tirarDados(cantidadDeDados: Integer)
activate Pais
Pais -> Ejercito: tirarDados(cantidadDeDados: Integer)
activate Ejercito
create DadosAtacante
Ejercito -> DadosAtacante: Dados(cantidadDeDados: Integer)
Ejercito --> Pais: dadosAtacante: Dados
deactivate Ejercito
Pais --> Batalla: dadosAtacante: Dados
deactivate Pais
Batalla -> PaisEnemigo: tirarDados()
activate PaisEnemigo
PaisEnemigo -> EjercitoEnemigo: tirarDados()
activate EjercitoEnemigo
EjercitoEnemigo --> PaisEnemigo: dadosDefensor:Dados
deactivate EjercitoEnemigo
PaisEnemigo --> Batalla: dadosDefensor:Dados
deactivate PaisEnemigo
Batalla -> DadosAtacante: comparadorDeDados(dadosDefensor: Dados)
DadosAtacante --> Batalla: fichasPerdidas: Array
Batalla -> Pais: pederFichas(num)
activate Pais
Pais -> Ejercito: perderFichas(num)
activate Ejercito
Ejercito --> Pais: Integer
deactivate Ejercito
deactivate Pais
Batalla -> PaisEnemigo: perderFichas(num, paisAtacante)
activate PaisEnemigo
PaisEnemigo -> EjercitoEnemigo: perderFichas(num)
activate EjercitoEnemigo

alt defensor queda con 0 fichas
    EjercitoEnemigo --> PaisEnemigo: 0: Integer
    deactivate EjercitoEnemigo
    PaisEnemigo -> PaisEnemigo: actualizarDueÃ±o(paisAtacante)
    activate PaisEnemigo
    PaisEnemigo -> Pais: getJugador()
    activate Pais
    Pais --> PaisEnemigo:  jugador
    deactivate Pais
    PaisEnemigo -> Pais: pasarFichasA(paisEnemigo)
    activate Pais
    deactivate PaisEnemigo
    Pais -> Pais: esAdyacente(paisEnemigo)
    activate Pais
    Pais --> Pais: Boolean
    deactivate Pais
    Pais -> Ejercito: pasarFichasADe(paisEnemigo,Jugador)
    deactivate Pais
    activate Ejercito
    Ejercito -> PaisEnemigo: agregarFichas(num,jugador)
    deactivate Ejercito
    activate PaisEnemigo
    PaisEnemigo -> PaisEnemigo: esDeJugador(jugador)
    activate PaisEnemigo
    PaisEnemigo --> PaisEnemigo: true: Boolean
    deactivate PaisEnemigo
    PaisEnemigo -> EjercitoEnemigo: agregarFichas(num: Integer)
    deactivate PaisEnemigo
    PaisEnemigo --> Batalla: Gano
else  defensor sigue con fichas
    activate EjercitoEnemigo
    EjercitoEnemigo --> PaisEnemigo: Integer
    deactivate EjercitoEnemigo
    PaisEnemigo --> Batalla: noGano
    deactivate PaisEnemigo
end
Batalla --> Tablero: resultadoBatalla: Boolean
Tablero --> Jugador: resultadoBatalla: Boolean

@enduml